AWSTemplateFormatVersion: 2010-09-09
Description: >-
  vendia-bank

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  CognitoUserPoolName:
    Type: String
    Description: The name of the Cognito User Pool to create
    Default: vendia-bank-user-pool


Resources:

  DB:
    DeletionPolicy: Retain
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: VendiaDB
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: sk_n
          AttributeType: N
        - AttributeName: gsi
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: lsi
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: sk_n
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      GlobalSecondaryIndexes:
      - IndexName: gsi
        KeySchema:
            - AttributeName: gsi
              KeyType: HASH
        Projection:
            ProjectionType: ALL



  ApiGatewayApi:
      Type: AWS::Serverless::Api
      Properties:
        StageName: 'prod'
        Auth:
          DefaultAuthorizer: CognitoAuthorizer
          Authorizers:
            CognitoAuthorizer:
              UserPoolArn: !GetAtt UserPool.Arn
              UserPoolClientId: !Ref UserPoolClient
              UserPoolDomain: !GetAtt UserPool.Domain


  BalancesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/balance.balanceHandler
      Runtime: nodejs20.x
      MemorySize: 512
      Timeout: 30
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DB
      - DynamoDBCrudPolicy:
          TableName: !Ref DB
      Environment:
        Variables:
          DB: !Ref DB
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /balance/{account_name}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer


  TransfersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/transfer.transferHandler
      Runtime: nodejs20.x
      MemorySize: 512
      Timeout: 30
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DB
      - DynamoDBCrudPolicy:
          TableName: !Ref DB
      Environment:
        Variables:
          DB: !Ref DB
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /transfer
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer


  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
        - AttributeDataType: String
          Name: "username"
          Mutable: false
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-user-pool-client'
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH # See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

Outputs:
  ApiUrl:
    Description: URL for application
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
  UserPool:
    Description: Cognito User Pool Id
    Value: !Ref UserPool
  UserPoolClient:
    Description: Cognito User Pool Client
    Value: !Ref UserPoolClient
  DB:
    Description: DynamoDB Table Name
    Value: !Ref DB
    